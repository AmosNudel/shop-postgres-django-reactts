{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nudel\\\\OneDrive\\\\Documents\\\\JohnBryceProjects\\\\lesson26HW\\\\frontend\\\\my-shop\\\\src\\\\bodyComponents\\\\CartComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Define a type for the cart item structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartComponent = () => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [totalSum, setTotalSum] = useState(0);\n\n  // This function calculates the total sum\n  const calculateTotalSum = updatedCartItems => {\n    return updatedCartItems.reduce((sum, item) => sum + item.totalPrice, 0);\n  };\n\n  // This function will update the cart and localStorage\n  const updateCart = updatedCartItems => {\n    // Update the cart state\n    setCartItems(updatedCartItems);\n\n    // Calculate the total sum\n    const total = calculateTotalSum(updatedCartItems);\n    setTotalSum(total);\n\n    // Save the updated cart to localStorage\n    localStorage.setItem('cart', JSON.stringify(updatedCartItems));\n  };\n\n  // Handle adding to the cart directly from the component\n  const addToCart = (productName, productPrice, amount) => {\n    const totalPrice = productPrice * amount;\n    const newCartItem = {\n      name: productName,\n      amount,\n      totalPrice\n    };\n\n    // Check if the product already exists in the cart\n    const existingItem = cartItems.find(item => item.name === productName);\n    let updatedCartItems;\n    if (existingItem) {\n      // If the product is already in the cart, update its quantity and price\n      updatedCartItems = cartItems.map(item => item.name === productName ? {\n        ...item,\n        amount: item.amount + amount,\n        totalPrice: item.totalPrice + totalPrice\n      } : item);\n    } else {\n      // Otherwise, add the new product to the cart\n      updatedCartItems = [...cartItems, newCartItem];\n    }\n\n    // Update the cart in state and localStorage\n    updateCart(updatedCartItems);\n  };\n\n  // Handle removing an item from the cart\n  const handleRemoveItem = name => {\n    const updatedCartItems = cartItems.filter(item => item.name !== name);\n    updateCart(updatedCartItems);\n  };\n  useEffect(() => {\n    // Load cart items directly from localStorage initially\n    const savedCart = JSON.parse(localStorage.getItem('cart') || '[]');\n    setCartItems(savedCart);\n    setTotalSum(calculateTotalSum(savedCart));\n  }, []); // Initial load on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Shopping Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), cartItems.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your cart is empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cartItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Amount: \", item.amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", item.totalPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleRemoveItem(item.name),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, item.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"total-sum\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total: $\", totalSum.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(CartComponent, \"LVG3tJVUJxwZDRAlETFqwgVeKD4=\");\n_c = CartComponent;\nexport default CartComponent;\nvar _c;\n$RefreshReg$(_c, \"CartComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CartComponent","_s","cartItems","setCartItems","totalSum","setTotalSum","calculateTotalSum","updatedCartItems","reduce","sum","item","totalPrice","updateCart","total","localStorage","setItem","JSON","stringify","addToCart","productName","productPrice","amount","newCartItem","name","existingItem","find","map","handleRemoveItem","filter","savedCart","parse","getItem","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","className","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/nudel/OneDrive/Documents/JohnBryceProjects/lesson26HW/frontend/my-shop/src/bodyComponents/CartComponent.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// Define a type for the cart item structure\r\ninterface CartItem {\r\n  name: string;\r\n  amount: number;\r\n  totalPrice: number;\r\n}\r\n\r\nconst CartComponent: React.FC = () => {\r\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n  const [totalSum, setTotalSum] = useState<number>(0);\r\n\r\n  // This function calculates the total sum\r\n  const calculateTotalSum = (updatedCartItems: CartItem[]) => {\r\n    return updatedCartItems.reduce((sum, item) => sum + item.totalPrice, 0);\r\n  };\r\n\r\n  // This function will update the cart and localStorage\r\n  const updateCart = (updatedCartItems: CartItem[]) => {\r\n    // Update the cart state\r\n    setCartItems(updatedCartItems);\r\n\r\n    // Calculate the total sum\r\n    const total = calculateTotalSum(updatedCartItems);\r\n    setTotalSum(total);\r\n\r\n    // Save the updated cart to localStorage\r\n    localStorage.setItem('cart', JSON.stringify(updatedCartItems));\r\n  };\r\n\r\n  // Handle adding to the cart directly from the component\r\n  const addToCart = (productName: string, productPrice: number, amount: number) => {\r\n    const totalPrice = productPrice * amount;\r\n    const newCartItem: CartItem = { name: productName, amount, totalPrice };\r\n\r\n    // Check if the product already exists in the cart\r\n    const existingItem = cartItems.find((item) => item.name === productName);\r\n\r\n    let updatedCartItems;\r\n    if (existingItem) {\r\n      // If the product is already in the cart, update its quantity and price\r\n      updatedCartItems = cartItems.map((item) =>\r\n        item.name === productName\r\n          ? { ...item, amount: item.amount + amount, totalPrice: item.totalPrice + totalPrice }\r\n          : item\r\n      );\r\n    } else {\r\n      // Otherwise, add the new product to the cart\r\n      updatedCartItems = [...cartItems, newCartItem];\r\n    }\r\n\r\n    // Update the cart in state and localStorage\r\n    updateCart(updatedCartItems);\r\n  };\r\n\r\n  // Handle removing an item from the cart\r\n  const handleRemoveItem = (name: string) => {\r\n    const updatedCartItems = cartItems.filter((item) => item.name !== name);\r\n    updateCart(updatedCartItems);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Load cart items directly from localStorage initially\r\n    const savedCart = JSON.parse(localStorage.getItem('cart') || '[]');\r\n    setCartItems(savedCart);\r\n    setTotalSum(calculateTotalSum(savedCart));\r\n  }, []); // Initial load on mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Shopping Cart</h2>\r\n      {cartItems.length === 0 ? (\r\n        <p>Your cart is empty</p>\r\n      ) : (\r\n        <ul>\r\n          {cartItems.map((item) => (\r\n            <li key={item.name}>\r\n              <h3>{item.name}</h3>\r\n              <p>Amount: {item.amount}</p>\r\n              <p>Price: ${item.totalPrice}</p>\r\n              <button onClick={() => handleRemoveItem(item.name)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <div className=\"total-sum\">\r\n        <h3>Total: ${totalSum.toFixed(2)}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAS,CAAC,CAAC;;EAEnD;EACA,MAAMS,iBAAiB,GAAIC,gBAA4B,IAAK;IAC1D,OAAOA,gBAAgB,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,UAAU,EAAE,CAAC,CAAC;EACzE,CAAC;;EAED;EACA,MAAMC,UAAU,GAAIL,gBAA4B,IAAK;IACnD;IACAJ,YAAY,CAACI,gBAAgB,CAAC;;IAE9B;IACA,MAAMM,KAAK,GAAGP,iBAAiB,CAACC,gBAAgB,CAAC;IACjDF,WAAW,CAACQ,KAAK,CAAC;;IAElB;IACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,gBAAgB,CAAC,CAAC;EAChE,CAAC;;EAED;EACA,MAAMW,SAAS,GAAGA,CAACC,WAAmB,EAAEC,YAAoB,EAAEC,MAAc,KAAK;IAC/E,MAAMV,UAAU,GAAGS,YAAY,GAAGC,MAAM;IACxC,MAAMC,WAAqB,GAAG;MAAEC,IAAI,EAAEJ,WAAW;MAAEE,MAAM;MAAEV;IAAW,CAAC;;IAEvE;IACA,MAAMa,YAAY,GAAGtB,SAAS,CAACuB,IAAI,CAAEf,IAAI,IAAKA,IAAI,CAACa,IAAI,KAAKJ,WAAW,CAAC;IAExE,IAAIZ,gBAAgB;IACpB,IAAIiB,YAAY,EAAE;MAChB;MACAjB,gBAAgB,GAAGL,SAAS,CAACwB,GAAG,CAAEhB,IAAI,IACpCA,IAAI,CAACa,IAAI,KAAKJ,WAAW,GACrB;QAAE,GAAGT,IAAI;QAAEW,MAAM,EAAEX,IAAI,CAACW,MAAM,GAAGA,MAAM;QAAEV,UAAU,EAAED,IAAI,CAACC,UAAU,GAAGA;MAAW,CAAC,GACnFD,IACN,CAAC;IACH,CAAC,MAAM;MACL;MACAH,gBAAgB,GAAG,CAAC,GAAGL,SAAS,EAAEoB,WAAW,CAAC;IAChD;;IAEA;IACAV,UAAU,CAACL,gBAAgB,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMoB,gBAAgB,GAAIJ,IAAY,IAAK;IACzC,MAAMhB,gBAAgB,GAAGL,SAAS,CAAC0B,MAAM,CAAElB,IAAI,IAAKA,IAAI,CAACa,IAAI,KAAKA,IAAI,CAAC;IACvEX,UAAU,CAACL,gBAAgB,CAAC;EAC9B,CAAC;EAEDX,SAAS,CAAC,MAAM;IACd;IACA,MAAMiC,SAAS,GAAGb,IAAI,CAACc,KAAK,CAAChB,YAAY,CAACiB,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAClE5B,YAAY,CAAC0B,SAAS,CAAC;IACvBxB,WAAW,CAACC,iBAAiB,CAACuB,SAAS,CAAC,CAAC;EAC3C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACE9B,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAAiC,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBlC,SAAS,CAACmC,MAAM,KAAK,CAAC,gBACrBtC,OAAA;MAAAiC,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEzBrC,OAAA;MAAAiC,QAAA,EACG9B,SAAS,CAACwB,GAAG,CAAEhB,IAAI,iBAClBX,OAAA;QAAAiC,QAAA,gBACEjC,OAAA;UAAAiC,QAAA,EAAKtB,IAAI,CAACa;QAAI;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpBrC,OAAA;UAAAiC,QAAA,GAAG,UAAQ,EAACtB,IAAI,CAACW,MAAM;QAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BrC,OAAA;UAAAiC,QAAA,GAAG,UAAQ,EAACtB,IAAI,CAACC,UAAU;QAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChCrC,OAAA;UAAQuC,OAAO,EAAEA,CAAA,KAAMX,gBAAgB,CAACjB,IAAI,CAACa,IAAI,CAAE;UAAAS,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAJ5D1B,IAAI,CAACa,IAAI;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL,eACDrC,OAAA;MAAKwC,SAAS,EAAC,WAAW;MAAAP,QAAA,eACxBjC,OAAA;QAAAiC,QAAA,GAAI,UAAQ,EAAC5B,QAAQ,CAACoC,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnC,EAAA,CAlFID,aAAuB;AAAAyC,EAAA,GAAvBzC,aAAuB;AAoF7B,eAAeA,aAAa;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}