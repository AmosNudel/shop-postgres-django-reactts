{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nudel\\\\OneDrive\\\\Documents\\\\JohnBryceProjects\\\\lesson26HW\\\\frontend\\\\my-shop\\\\src\\\\headerComponents\\\\Logout.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logout = ({\n  setIsLoggedIn\n}) => {\n  _s();\n  // State to store the username\n  const [username, setUsername] = useState(null);\n\n  // Decode the token and set the username when the component mounts\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        // Decode the token to get the username (or any other info you need)\n        const decoded = jwt_decode(token);\n        setUsername(decoded.username); // Store the username in the state\n      } catch (error) {\n        console.error('Failed to decode token:', error);\n      }\n    }\n  }, []); // Empty dependency array ensures this runs only once when the component mounts\n\n  const handleLogout = () => {\n    localStorage.removeItem('token'); // Remove the token from localStorage\n    setIsLoggedIn(false); // Update login state to false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [username && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Welcome, \", username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 26\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Logout, \"Tll88kuSsLVx4FtakfCyQkhtKNU=\");\n_c = Logout;\nexport default Logout;\nvar _c;\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"names":["React","useEffect","useState","jwt_decode","jsxDEV","_jsxDEV","Logout","setIsLoggedIn","_s","username","setUsername","token","localStorage","getItem","decoded","error","console","handleLogout","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/nudel/OneDrive/Documents/JohnBryceProjects/lesson26HW/frontend/my-shop/src/headerComponents/Logout.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\ninterface LogoutProps {\r\n    setIsLoggedIn: (status: boolean) => void; // Accept setIsLoggedIn to update login state\r\n}\r\n\r\ninterface TokenPayload {\r\n    username: string; // Adjust the field based on your token's structure\r\n}\r\n\r\nconst Logout: React.FC<LogoutProps> = ({ setIsLoggedIn }) => {\r\n    // State to store the username\r\n    const [username, setUsername] = useState<string | null>(null);\r\n\r\n    // Decode the token and set the username when the component mounts\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            try {\r\n                // Decode the token to get the username (or any other info you need)\r\n                const decoded: TokenPayload = jwt_decode(token);\r\n                setUsername(decoded.username); // Store the username in the state\r\n            } catch (error) {\r\n                console.error('Failed to decode token:', error);\r\n            }\r\n        }\r\n    }, []); // Empty dependency array ensures this runs only once when the component mounts\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('token'); // Remove the token from localStorage\r\n        setIsLoggedIn(false); // Update login state to false\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {username && <p>Welcome, {username}!</p>} {/* Display the username */}\r\n            <button onClick={handleLogout}>Logout</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logout;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUpC,MAAMC,MAA6B,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACzD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAgB,IAAI,CAAC;;EAE7D;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACP,IAAI;QACA;QACA,MAAMG,OAAqB,GAAGX,UAAU,CAACQ,KAAK,CAAC;QAC/CD,WAAW,CAACI,OAAO,CAACL,QAAQ,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAME,YAAY,GAAGA,CAAA,KAAM;IACvBL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCX,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,oBACIF,OAAA;IAAAc,QAAA,GACKV,QAAQ,iBAAIJ,OAAA;MAAAc,QAAA,GAAG,WAAS,EAACV,QAAQ,EAAC,GAAC;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAAC,GAAC,eAC1ClB,OAAA;MAAQmB,OAAO,EAAEP,YAAa;MAAAE,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd,CAAC;AAACf,EAAA,CA7BIF,MAA6B;AAAAmB,EAAA,GAA7BnB,MAA6B;AA+BnC,eAAeA,MAAM;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}